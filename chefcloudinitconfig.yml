#cloud-config
fqdn: @@{name}@@.domain.com
manage_etc_hosts: true
node_name: @@{name}@@

bootcmd: 
  - "sudo curl -L https://omnitruck.chef.io/install.sh | sudo bash -s -- -v 13.5.3"

chef:

 # Valid values are 'gems' and 'packages' and 'omnibus'
 install_type: "omnibus"

 # Boolean: run 'install_type' code even if chef-client
 #          appears already installed.
 force_install: false

 # Chef settings
 server_url: "https://chef.domain.com/organizations/automate/"

 # Node Name
 # Defaults to the instance-id if not present
 node_name: "#{Socket.gethostname}"

 # Environment
 # Defaults to '_default' if not present
 #environment: "production"

 # Default validation name is chef-validator
 validation_name: "ChefWS"
 # if validation_cert's value is "system" then it is expected
 # that the file already exists on the system.
 validation_cert: |
     -----BEGIN RSA PRIVATE KEY-----
     -----END RSA PRIVATE KEY-----

 # A run list for a first boot json, an example (not required)
 run_list:
  - "role[ngnx]"

 # Specify a list of initial attributes used by the cookbooks
 #initial_attributes:
 #   apache:
 #     prefork:
 #       maxclients: 100
 #     keepalive: "off"

 # if install_type is 'omnibus', change the url to download
 omnibus_url: "https://www.chef.io/chef/install.sh"

 # if install_type is 'omnibus', pass pinned version string
 # to the install script
 omnibus_version: "12.3.0"


# Capture all subprocess output into a logfile
# Useful for troubleshooting cloud-init issues
output: {all: '| tee -a /var/log/cloud-init-output.log'}

runcmd:
  - "[ firewall-cmd, --zone=public, --add-service http, --permanent ]"
  - chef-client